#ifndef ZTD_MATH_H
#define ZTD_MATH_H

namespace ztd { namespace math {
    const double e = 2.71828182845904523536028747135266249775724709369995;
    const double pi = 3.14159265358979323846264338327950288419716939937510;
    const double phi = 1.6180339887498948482045868343656381177203091798057628621;
    const double tau = 2 * pi;

    const double log2e = 1.442695040888963407359924681001892137;
    const double log10e = 0.434294481903251827651128918916605082;
    const double ln2 = 0.693147180559945309417232121458176568;
    const double ln10 = 2.302585092994045684017991454684364208;

    const double two_sqrtpi = 1.128379167095512573896158903121545172;
    const double sqrt2 = 1.414213562373095048801688724209698079;
    const double sqrt1_2 = 0.707106781186547524400844362104849039;

    const double rad_per_deg = 0.0174532925199432957692369076848861271344287188854172545609719144;
    const double deg_per_rad = 57.295779513082320876798154814105170332405472466564321549160243861;

    template<typename T>
    bool is_power_of_two(T n) {
        // assert(n> 0); // FIXME: Implement assert
        return (n & (n - 1)) == 0;
    }
}}

#endif
